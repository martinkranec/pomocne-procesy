<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://petriflow.com/petriflow.schema.xsd">
	<id>find_user_cases</id>
	<initials>FUC</initials>
	<title>find_user_cases</title>
	<defaultRole>false</defaultRole>
	<anonymousRole>false</anonymousRole>
	<transitionRole>false</transitionRole>
	<roleRef>
		<id>admin</id>
		<caseLogic>
			<create>true</create>
			<delete>true</delete>
		</caseLogic>
	</roleRef>
	<role>
		<id>admin</id>
		<title>Admin</title>
	</role>
	<data type="button">
		<id>find</id>
		<title/>
		<placeholder>Find</placeholder>
		<event type="set">
			<id>set_event_0</id>
			<actions phase="post">
				<action id="action_0">
					cases: f.cases,
                    tasks: f.tasks,
                    text_0: f.text_0;

                    if (!text_0.value) {
                        return
                    }

                    def user = userService.findByEmail(text_0.value, false)
                    if (!user) {
                        return
                    }

                    def _cases = findCases { it.viewUsers.contains(user.stringId) }
                    def _tasks = findTasks { it.viewUsers.contains(user.stringId) }
                    def tasksMap = _tasks.groupBy { it.caseId }

                    def casesStr = ""

					def allCases = (_cases + workflowService.findAllById(tasksMap.keySet() as List)).unique { a, b -> a.stringId &lt;=> b.stringId }

					allCases.each { caze -&gt;
                        def fields = caze.viewUserRefs.findAll { caze.dataSet[it].value?.userValues?.id?.contains(user.stringId) }
                        casesStr += "$caze.title $caze.stringId: $fields tasks: \n"
						tasksMap[caze.stringId]?.each { task ->
							casesStr += "    ${task.title?.defaultValue} $task.stringId: ${task.viewUserRefs}\n"
						}
                    }

                    change cases value { casesStr }</action>
			</actions>
		</event>
	</data>
	<data type="text">
		<id>text_0</id>
		<title>User email</title>
	</data>
	<data type="text">
		<id>cases</id>
		<title>Cases</title>
		<component>
			<name>area</name>
		</component>
	</data>
	<data type="text">
		<id>tasks</id>
		<title>Tasks</title>
		<component>
			<name>area</name>
		</component>
	</data>
	<transition>
		<id>t1</id>
		<x>540</x>
		<y>180</y>
		<label>Fix</label>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>admin</id>
			<logic>
				<view>true</view>
				<cancel>true</cancel>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>t1_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>text_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>find</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>cases</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>tasks</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t1_assign</id>
		</event>
		<event type="finish">
			<id>t1_finish</id>
		</event>
		<event type="cancel">
			<id>t1_cancel</id>
		</event>
		<event type="delegate">
			<id>t1_delegate</id>
		</event>
	</transition>
</document>