<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://petriflow.com/petriflow.schema.xsd">
	<id>migrate_process</id>
	<initials>MPR</initials>
	<title>migrate_process</title>
	<icon>device_hub</icon>
	<defaultRole>true</defaultRole>
	<anonymousRole>true</anonymousRole>
	<transitionRole>false</transitionRole>
	<role>
		<id>admin</id>
		<title>Admin</title>
	</role>
	<data type="button">
		<id>migrate</id>
		<title/>
		<placeholder>Migrate</placeholder>
		<event type="set">
			<id>migrate_set</id>
			<actions phase="pre">
				<action id="1">identifier: f.identifier,
                    newNet: f.newNet;

                    def migrationHelper = com.netgrif.application.engine.configuration.ApplicationContextProvider.getBean("migrationHelper")
                    def importer = com.netgrif.application.engine.configuration.ApplicationContextProvider.getBean("importer")
                    petriNetService.evictAllCaches()

                    def currentNet = petriNetService.getNewestVersionByIdentifier(identifier.value as String)
                    def reimported = importer.importPetriNet(new java.io.File(newNet.value.path)).get()

                    assert (reimported.identifier == currentNet.identifier)

                    migrationHelper.updateNetIgnoreRoles(currentNet, reimported, new java.io.File(newNet.value.path), null)

                    petriNetService.evictAllCaches()
                    def actionCacheService = com.netgrif.application.engine.configuration.ApplicationContextProvider.getBean("fieldActionsCacheService")
                    actionCacheService.clearActionCache()</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>migrate_all</id>
		<title/>
		<placeholder>Migrate all versions</placeholder>
		<event type="set">
			<id>migrate_set</id>
			<actions phase="pre">
				<action id="2">identifier: f.identifier,
                    newNet: f.newNet;

                    def migrationHelper = com.netgrif.application.engine.configuration.ApplicationContextProvider.getBean("migrationHelper")
                    def importer = com.netgrif.application.engine.configuration.ApplicationContextProvider.getBean("importer")
                    petriNetService.evictAllCaches()

                    def reimported = importer.importPetriNet(new java.io.File(newNet.value.path)).get()

                    def allFpuNets = petriNetService.getByIdentifier(identifier.value)
                    allFpuNets.each { currentNet -&gt;
                        assert (reimported.identifier == currentNet.identifier)
                        migrationHelper.updateNetIgnoreRoles(currentNet, reimported, new java.io.File(newNet.value.path), null)
                    }
                    petriNetService.evictAllCaches()
                    def actionCacheService = com.netgrif.application.engine.configuration.ApplicationContextProvider.getBean("fieldActionsCacheService")
                    actionCacheService.clearActionCache()</action>
			</actions>
		</event>
	</data>
	<data type="file">
		<id>newNet</id>
		<title/>
	</data>
	<data type="text">
		<id>identifier</id>
		<title>Identifier</title>
	</data>
	<transition>
		<id>t1</id>
		<x>580</x>
		<y>180</y>
		<label>Migrate</label>
		<icon>next_plan </icon>
		<assignPolicy>auto</assignPolicy>
		<roleRef>
			<id>admin</id>
			<logic>
				<view>true</view>
				<cancel>true</cancel>
				<assign>true</assign>
				<delegate>true</delegate>
				<perform>true</perform>
			</logic>
		</roleRef>
		<dataGroup>
			<id>t1_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>identifier</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>newNet</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>migrate</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>migrate_all</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>2</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t1_assign</id>
		</event>
		<event type="finish">
			<id>t1_finish</id>
		</event>
		<event type="cancel">
			<id>t1_cancel</id>
		</event>
		<event type="delegate">
			<id>t1_delegate</id>
		</event>
	</transition>
</document>